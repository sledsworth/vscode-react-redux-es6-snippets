{
	"Redux Action Definition": {
		"prefix": "action",
		"body": "export const ${action type} = \"${action type}\""
	},
	"ES6 React Import": {
		"prefix": "reactImport",
		"body": "import React, { PropTypes} from 'react';"
	},
	"ES6 Named Import": {
		"prefix": "nameImport",
		"body": "import ${default export} { ${named import} } from '${import path}';"
	},
	"ES6 Import": {
		"prefix": "import",
		"body": "import ${1:* as ${2:name}} from '${3:import path}';"
	},
	"React Presentational(dumb) Component Template": {
		"prefix": "dumbComponent",
		"body": [
			"import React, { PropTypes } from 'react';",
			"",
			"const ${ComponentName} = ({${props}}) => {",
			"",
			"	return (",
			"		<div>",
			"			${Markup}",
			"		</div>",
			"	);",
			"};",
			"",
			"${ComponentName}.defaultProps = {",
			"	${:// myProp: 300}",
			"};",
			"",
			"${ComponentName}.propTypes = {",
			"	${:// PropType Requirement}",
			"};",
			"",
			"export default ${ComponentName};"
		],
		"description": "React Presentational Component Template"
	},
	"React-Redux Container(smart) Component Template": {
		"prefix": "reduxComponent",
		"body": [
			"import React, { PropTypes } from 'react';",
			"import { connect } from 'react-redux';",
			"import { bindActionCreators } from 'redux';",
			"import * as ${actions} from '${path/to/action}/${actions}';",
			"",
			"",
			"export class ${ComponentName} extends React.Component {",
			"	${constructor(props, context) {",
			"		super(props, context);",
			"",
			"		${// Initialize State}",
			"	}}",
			"",
			"	componentDidMount() {",
			"		${// Requires DOM nodes? Async network calls? Those go here.}",
			"	}",
			"",
			"	componentWillReceiveProps() {",
			"		${// Need to update state based on prop changes? Do that here!}",
			"	}",
			"",
			"	componentWillUnmount() {",
			"		${// Need to clean something up before this component is destroyed? Goes here.}",
			"	}",
			"",
			"	render() {",
			"		return (",
			"			<div>",
			"				${Markup}",
			"			</div>",
			"		);",
			"	}",
			"}",
			"",
			"${ComponentName}.defaultProps = {",
			"	${:// myProp: 300}",
			"};",
			"",
			"${ComponentName}.propTypes = {",
			"	${:// myProp: PropTypes.string.isRequired}",
			"};",
			"",
			"function mapStateToProps(state, ownProps) {",
			"	return {",
			"		state,",
			"	};",
			"}",
			"",
			"function mapDispatchToProps(dispatch) {",
			"	return {",
			"		actions: bindActionCreators(${actions}, dispatch),",
			"	};",
			"}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${ComponentName});",
			""
		],
		"description": "React-Redux Container(Smart) Component Template"
	},
	"React Only Container(smart) Component Template": {
		"prefix": "smartComponent",
		"body": [
			"import React, { PropTypes } from 'react';",
			"",
			"",
			"export class ${ComponentName} extends React.Component {",
			"	constructor(props, context) {",
			"		super(props, context);",
			"",
			"		${// Initialize State}",
			"	}",
			"",
			"	componentDidMount() {",
			"		${// Requires DOM nodes? Async network calls? Those go here.}",
			"	}",
			"",
			"	componentWillReceiveProps() {",
			"		${// Need to update state based on prop changes? Do that here!}",
			"	}",
			"",
			"	componentWillUnmount() {",
			"		${// Need to clean something up before this component is removed from the browser DOM? Goes here.}",
			"	}",
			"",
			"	render() {",
			"		return (",
			"			<div>",
			"				${}",
			"			</div>",
			"		);",
			"	}",
			"}",
			"",
			"${ComponentName}.defaultProps = {",
			"	${:// myProp: 300}",
			"};",
			"",
			"${ComponentName}.propTypes = {",
			"	${:// myProp: PropTypes.string.isRequired}",
			"};",
			"",
			"export default ${ComponentName};",
			""
		]
	},
	"React Constructor": {
		"prefix": "construct",
		"body": [	
			"	${constructor(props, context) {",
			"		super(props, context);",
			"",
			"		${// Initialize State}",
			"	}}"
		]
	},
	"React Lifecycle Hook: Component Did Mount": {
		"prefix": "didMount",
		"body": [	
			"	componentDidMount() {",
			"		${// Requires DOM nodes? Async network calls? Those go here.}",
			"	}"
		],
		"description": "Requires DOM nodes? Async network calls? Those go here."
	},
	"React Lifecycle Hook: Component Will Receive Props": {
		"prefix": "willReceiveProps",
		"body": [	
			"	componentWillReceiveProps() {",
			"		${// Need to update state based on prop changes? Do that here!}",
			"	}"
		],
		"description": "Need to update state based on prop changes? Do that here!"
	},
	"React Lifecycle Hook: Component Will Unmount": {
		"prefix": "willUnmount",
		"body": [	
			"	componentWillReceiveProps() {",
			"		${// Need to update state based on prop changes? Do that here!}",
			"	}"
		],
		"description": "Need to clean something up before this component is destroyed? Goes here."
	}

}