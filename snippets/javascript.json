{
	"Redux Action Definition": {
		"prefix": "reduxActionExport",
		"body": "export const ${actionType} = \"${actionType}\""
	},
	"ES6 React Import": {
		"prefix": "reactImport",
		"body": "import React, { PropTypes} from 'react';"
	},
	"ES6 Named Import": {
		"prefix": "namedImport",
		"body": "import ${defaultImport} { ${namedImport} } from '${pathToImport}';"
	},
	"ES6 Default Import": {
		"prefix": "import",
		"body": "import ${defaultImport} from '${pathToImport}';"
	},
	"ES6 Aliased Import": {
		"prefix": "aliasedImport",
		"body": "import * as ${importName} from '${pathToImport}';"
	},
	"React Presentational(dumb) Component Template": {
		"prefix": "dumbComponent",
		"body": [
			"import React, { PropTypes } from 'react';",
			"",
			"const ${ComponentName} = ({${props}}) => {",
			"",
			"	return (",
			"		<div>",
			"			${1:}",
			"		</div>",
			"	);",
			"};",
			"",
			"${ComponentName}.defaultProps = {",
			"	${2:}",
			"};",
			"",
			"${ComponentName}.propTypes = {",
			"	${3:}",
			"};",
			"",
			"export default ${ComponentName};",
			""
		],
		"description": "React Presentational(dumb) Component Template. Use this if the component does not need to tie into any lifecycle hooks or hold state."
	},
	"React-Redux Container(smart) Component Template": {
		"prefix": "reduxComponent",
		"body": [
			"import React, { PropTypes } from 'react';",
			"import { connect } from 'react-redux';",
			"import { bindActionCreators } from 'redux';",
			"import * as ${actions} from '${pathToActions}';",
			"",
			"",
			"class ${ComponentName} extends React.Component {",
			"	${constructor(props, context) {",
			"		super(props, context);",
			"		${1:}",
			"	}}",
			"",
			"	${componentDidMount() {",
			"		${2:}",
			"	}}",
			"",
			"	${componentWillReceiveProps() {",
			"		${3:}",
			"	}}",
			"",
			"	render() {",
			"		return (",
			"			${4:}",
			"		);",
			"	}",
			"}",
			"",
			"${ComponentName}.defaultProps = {",
			"	${5:}",
			"};",
			"",
			"${ComponentName}.propTypes = {",
			"	${6:}",
			"};",
			"",
			"function mapStateToProps(rootState, ownProps) {",
			"	return {",
			"		${7:}",
			"	};",
			"}",
			"",
			"function mapDispatchToProps(dispatch) {",
			"	return {",
			"		actions: bindActionCreators(${actions}, dispatch),",
			"	};",
			"}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${ComponentName});",
			""
		],
		"description": "React-Redux Container(Smart) Component Template. Use this if the component is responsible for keeping track of state and you are using redux to store that state."
	},
	"React Only Container(smart) Component Template": {
		"prefix": "smartComponent",
		"body": [
			"import React, { PropTypes } from 'react';",
			"",
			"",
			"class ${ComponentName} extends React.Component {",
			"	${1:constructor(props, context) {",
			"		super(props, context);",
			"		${2:}",
			"	}}",
			"",
			"	${3:componentDidMount() {",
			"		${4:}",
			"	}}",
			"",
			"	${5:componentWillReceiveProps() {",
			"		${6:}",
			"	}}",
			"",
			"	${7:componentWillUnmount() {",
			"		${8:}",
			"	}}",
			"",
			"	render() {",
			"		return (",
			"			${9:}",
			"		);",
			"	}",
			"}",
			"",
			"${ComponentName}.defaultProps = {",
			"	${10:}",
			"};",
			"",
			"${ComponentName}.propTypes = {",
			"	${11:}",
			"};",
			"",
			"export default ${ComponentName};",
			""
		]
	},
	"React Constructor": {
		"prefix": "constructor",
		"body": [	
			"	constructor(props, context) {",
			"		super(props, context);",
			"		$1",
			"	}"
		]
	},
	"React Set Component State": {
		"prefix": "setState",
		"body": [	
			"this.setState($1);"
		],
		"description": "Performs a shallow merge of nextState into current state. This is the primary method you use to trigger UI updates from event handlers and server request callbacks."
	},
	"React Lifecycle Hook: Component Did Mount": {
		"prefix": "didMount",
		"body": [	
			"	componentDidMount() {",
			"		$1",
			"	}"
		],
		"description": "Requires DOM nodes? Async network calls? Those go here."
	},
	"React Lifecycle Hook: Component Will Mount": {
		"prefix": "willMount",
		"body": [	
			"	componentWillMount() {",
			"		$1",
			"	}"
		],
		"description": "Invoked immediately before mounting occurs. It is called before render(), therefore setting state in this method will not trigger a re-rendering. Avoid introducing any side-effects or subscriptions in this method."
	},
	"React Lifecycle Hook: Component Will Receive Props": {
		"prefix": "willReceiveProps",
		"body": [	
			"	componentWillReceiveProps() {",
			"		$1",
			"	}"
		],
		"description": "Need to update state based on prop changes? Do that here!"
	},
	"React Lifecycle Hook: Component Will Unmount": {
		"prefix": "willUnmount",
		"body": [	
			"	componentWillUnmount() {",
			"		$1",
			"	}"
		],
		"description": "Need to clean something up before this component is destroyed? Goes here."
	}

}