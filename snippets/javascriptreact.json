{
  "React Higher-order Component": {
    "prefix": "hoc",
    "body": [
      "import React from 'react';",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}(${2:WrappedComponent}) {",
      "\tfunction ${3:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}(props) {",
      "\t\treturn <$2 {...props} $4 />",
      "\t}",
      "",
      "\tconst wrappedComponentName = $2.displayName",
      "\t\t|| $2.name",
      "\t\t|| 'Component';",
      "",
      "\t$3.displayName = `$1(\\${wrappedComponentName\\})`;",
      "\treturn $3;",
      "}",
      ""
    ],
    "description": "React Hgher-order Component."
  },
  "React Presentational Component": {
    "prefix": "pc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "function ${TM_FILENAME_BASE}({ ${1:props} }) {",
      "\t$2",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t$3",
      "\t\t</div>",
      "\t);",
      "}",
      "",
      "${TM_FILENAME_BASE}.propTypes = {",
      "\t$4",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};",
      ""
    ],
    "description":
      "React Presentational Component - Use if you do not need state or refs."
  },
  "React Container Component": {
    "prefix": "cc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends React.Component {",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
      "\t\t$2",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$3",
      "\t\t);",
      "\t}",
      "}",
      "",
      "",
      "$1.propTypes = {",
      "\t$4",
      "};",
      "",
      "export default $1",
      ""
    ],
    "description": "React Container Component - Use if you need state or refs."
  },
  "Redux Connected Container Component": {
    "prefix": "rcc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { bindActionCreators } from 'redux';",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends React.Component {",
      "\tconstructor(props, context) {",
      "\t\tsuper(props, context);",
      "\t\t$2",
      "\t}",
      "",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$3",
      "\t\t);",
      "\t}",
      "}",
      "",
      "$1.propTypes = {",
      "\t$4",
      "};",
      "",
      "function mapStateToProps(state, ownProps) {",
      "\treturn {",
      "\t\t$5",
      "\t};",
      "}",
      "",
      "export default connect(mapStateToProps)($1);",
      ""
    ],
    "description":
      "Redux Container Component Template. Use this if the component is responsible for keeping track of state and you are using redux to store that state."
  },
  "Redux Map State to Properties": {
    "prefix": "rms",
    "body": [
      "function mapStateToProps(state, ownProps) {",
      "\treturn {",
      "\t\t$1",
      "\t};",
      "}"
    ],
    "description": "Creates mapStateToProps function."
  },
  "Redux Map Dispatch to Properties": {
    "prefix": "rmd",
    "body": [
      "function mapDispatchToProps(dispatch) {",
      "\treturn {",
      "\t\tactions: bindActionCreators(${1:actions}, dispatch),",
      "\t};",
      "}"
    ],
    "description": "Creates mapDispatchToProps function."
  },
  "Redux Export Connected Component": {
    "prefix": "rec",
    "body": [
      "export default connect(${1|null,mapStateToProps|}${2:, mapDispatchToProps})(${3:${TM_FILENAME_BASE}});"
    ],
    "description": "Creates mapDispatchToProps function."
  },
  "Default Properties": {
    "prefix": "defaultProps",
    "body": ["${TM_FILENAME_BASE}.defaultProps = {", "\t$1", "};"],
    "description": ""
  },
  "Property Types": {
    "prefix": "propTypes",
    "body": ["${TM_FILENAME_BASE}.propTypes = {", "\t$1", "};"],
    "description": ""
  },
  "React Set Component State": {
    "prefix": "setState",
    "body": ["this.setState((prevState, props) => ({", "\t$1", "}));"],
    "description":
      "Performs a shallow merge of nextState into current state. This is the primary method you use to trigger UI updates from event handlers and server request callbacks."
  },
  "React Lifecycle Hook: Component Did Mount": {
    "prefix": "compDidMount",
    "body": ["componentDidMount() {", "\t$1", "}"],
    "description": "Requires DOM nodes? Async network calls? Those go here."
  },
  "React Lifecycle Hook: Component Will Mount": {
    "prefix": "compWillMount",
    "body": ["componentWillMount() {", "\t$1", "}"],
    "description":
      "Invoked immediately before mounting occurs. It is called before render(), therefore setting state in this method will not trigger a re-rendering. Avoid introducing any side-effects or subscriptions in this method."
  },
  "React Lifecycle Hook: Component Will Receive Props": {
    "prefix": "compWillReceiveProps",
    "body": ["componentWillReceiveProps() {", "\t$1", "}"],
    "description": "Need to update state based on prop changes? Do that here!"
  },
  "React Lifecycle Hook: Component Will Unmount": {
    "prefix": "compWillUnmount",
    "body": ["componentWillUnmount() {", "\t$1", "}"],
    "description":
      "Need to clean something up before this component is destroyed? Goes here."
  },
  "React Lifecycle Hook: Should Component Update": {
    "prefix": "compShouldUpdate",
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$1", "}"],
    "description":
      "Used to determine if the component should rerender from a change."
  },
  "ES6 Named Import": {
    "prefix": "importNamed",
    "body": "import { ${namedImport} } from '${pathToImport}';"
  },
  "ES6 Default Import": {
    "prefix": "importDefault",
    "body": "import ${defaultImport} from '${pathToImport}';"
  },
  "ES6 Aliased Import": {
    "prefix": "importAliased",
    "body": "import * as ${importName} from '${pathToImport}';"
  },
  "Redux Action Type Definition": {
    "prefix": "exportAction",
    "body": "export const ${actionType} = '${actionType}'"
  },
  "Redux Reducer Template": {
    "prefix": "reducer",
    "body": [
      "import * as types from '${1:pathToActionTypes}';",
      "",
      "const ${2:${TM_FILENAME_BASE}}InitialState = {$3};",
      "",
      "const reducers = {};",
      "",
      "export default function ${2:${TM_FILENAME_BASE}}(state = agentReducerInitialState, action) {",
      "\tconst targetReducerFunc = reducers[action.type];",
      "\tif (typeof targetReducerFunc === 'function') {",
      "\t\treturn targetReducerFunc(state, action);",
      "\t}",
      "\treturn state;",
      "};",
      "",
      "reducers[types.${4}] = function(state, action) {",
      "\t$4",
      "}",
      "",
      ""
    ],
    "description": "Redux reducer template"
  }
}
