{
	"Redux Action Type Definition": {
		"prefix": "reduxActionExport",
		"body": "export const ${actionType} = '${actionType}'"
	},
	"ES6 React Import": {
		"prefix": "reactImport",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';"
		]
	},
	"ES6 Named Import": {
		"prefix": "namedImport",
		"body": "import ${defaultImport} { ${namedImport} } from '${pathToImport}';"
	},
	"ES6 Default Import": {
		"prefix": "defaultImport",
		"body": "import ${defaultImport} from '${pathToImport}';"
	},
	"ES6 Aliased Import": {
		"prefix": "aliasedImport",
		"body": "import * as ${importName} from '${pathToImport}';"
	},
	"React Presentational(dumb) Component Template": {
		"prefix": "dumbComponent",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"",
			"const ${1:ComponentName} = ({ ${2:props} }) => {",
			"",
			"\treturn (",
			"\t\t<div>",
			"\t\t\t$3",
			"\t\t</div>",
			"\t);",
			"};",
			"",
			"${1:ComponentName}.defaultProps = {",
			"\t$4",
			"};",
			"",
			"${1:ComponentName}.propTypes = {",
			"\t$5",
			"};",
			"",
			"export default ${1:ComponentName};",
			""
		],
		"description": "React Presentational(dumb) Component Template. Use this if the component does not need to tie into any lifecycle hooks or hold state."
	},
	"React-Redux Container(smart) Component Template": {
		"prefix": "reduxComponent",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"import { connect } from 'react-redux';",
			"import { bindActionCreators } from 'redux';",
			"import * as ${1:actions} from '${2:pathToActions}';",
			"",
			"class ${3:ComponentName} extends React.Component {",
			"\tconstructor(props, context) {",
			"\t\tsuper(props, context);",
			"\t\t$4",
			"\t}",
			"",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t$5",
			"\t\t);",
			"\t}",
			"}",
			"",
			"${3:ComponentName}.defaultProps = {",
			"\t$6",
			"};",
			"",
			"${3:ComponentName}.propTypes = {",
			"\t$7",
			"};",
			"",
			"function mapStateToProps(state, ownProps) {",
			"\treturn {",
			"\t\t$8",
			"\t};",
			"}",
			"",
			"function mapDispatchToProps(dispatch) {",
			"\treturn {",
			"\t\tactions: bindActionCreators(${1:actions}, dispatch),",
			"\t};",
			"}",
			"",
			"export default connect(mapStateToProps, mapDispatchToProps)(${3:ComponentName});",
			""
		],
		"description": "React-Redux Container(Smart) Component Template. Use this if the component is responsible for keeping track of state and you are using redux to store that state."
	},
	"React Only Container(smart) Component Template": {
		"prefix": "smartComponent",
		"body": [
			"import React from 'react';",
			"import PropTypes from 'prop-types';",
			"$6",
			"",
			"class ${1:ComponentName} extends React.Component {",
			"\tconstructor(props, context) {",
			"\t\tsuper(props, context);",
			"\t\t$2",
			"\t}",
			"",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t$3",
			"\t\t);",
			"\t}",
			"}",
			"",
			"${1:ComponentName}.defaultProps = {",
			"\t$4",
			"};",
			"",
			"${1:ComponentName}.propTypes = {",
			"\t$5",
			"};",
			"",
			"export default ${1:ComponentName};",
			""
		]
	},
	"React Constructor": {
		"prefix": "reactConstructor",
		"body": [	
			"\tconstructor(props, context) {",
			"\t\tsuper(props, context);",
			"\t\t$1",
			"\t}"
		]
	},
	"React Set Component State": {
		"prefix": "setState",
		"body": [	
			"this.setState($1);"
		],
		"description": "Performs a shallow merge of nextState into current state. This is the primary method you use to trigger UI updates from event handlers and server request callbacks."
	},
	"React Lifecycle Hook: Component Did Mount": {
		"prefix": "didMount",
		"body": [	
			"componentDidMount() {",
			"\t$1",
			"}"
		],
		"description": "Requires DOM nodes? Async network calls? Those go here."
	},
	"React Lifecycle Hook: Component Will Mount": {
		"prefix": "willMount",
		"body": [	
			"componentWillMount() {",
			"\t$1",
			"}"
		],
		"description": "Invoked immediately before mounting occurs. It is called before render(), therefore setting state in this method will not trigger a re-rendering. Avoid introducing any side-effects or subscriptions in this method."
	},
	"React Lifecycle Hook: Component Will Receive Props": {
		"prefix": "willReceiveProps",
		"body": [	
			"componentWillReceiveProps() {",
			"\t$1",
			"}"
		],
		"description": "Need to update state based on prop changes? Do that here!"
	},
	"React Lifecycle Hook: Component Will Unmount": {
		"prefix": "willUnmount",
		"body": [	
			"componentWillUnmount() {",
			"\t$1",
			"}"
		],
		"description": "Need to clean something up before this component is destroyed? Goes here."
	},
	"Redux Reducer Template": {
		"prefix": "reducer",
		"body": [	
			"import * as types from '${1:pathToActionTypes}';",
			"",
			"const ${2:reducerName}InitialState = {$3};",
			"",
			"const ${2:reducerName} = (state = ${2:reducerName}InitialState, action) => {",
			"\tswitch (action.type) {",
			"\t\tcase types.${3:actionType}:",
			"\t\t\treturn state;",
			"\t\tdefault:",
			"\t\t\treturn state;",
			"\t}",
			"}",
			"",
			"export default ${2:reducerName};",
			""
		],
		"description": "Redux reducer template"
	},
	"Redux Action Template": {
		"prefix": "reduxAction",
		"body": [	
			"export const ${1:actionName} = ($2) => {",
			"\treturn { type: actionTypes.${3:actionType} };",
			"};",
			""
		],
		"description": "Redux action template"
	}
}
